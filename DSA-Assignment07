ðŸ’¡ **Question 1**

Given two strings s and t, *determine if they are isomorphic*.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.

**Example 1:**

**Input:** s = "egg", t = "add"

**Output:** true

Solution :

def isIsomorphic(s, t):
    if len(s) != len(t):
        return False

    s_to_t = {}
    t_to_s = {}

    for i in range(len(s)):
        char_s = s[i]
        char_t = t[i]

        if char_s in s_to_t:
            if s_to_t[char_s] != char_t:
                return False
        else:
            s_to_t[char_s] = char_t

        if char_t in t_to_s:
            if t_to_s[char_t] != char_s:
                return False
        else:
            t_to_s[char_t] = char_s

    return True

s = input()
t = input()
print(isIsomorphic(s, t))


ðŸ’¡ **Question 2**

Given a string num which represents an integer, return true *if* num *is a **strobogrammatic number***.

A **strobogrammatic number** is a number that looks the same when rotated 180 degrees (looked at upside down).

**Example 1:**

**Input:** num = "69"

**Output:**

true

Solution :

def isStrobogrammatic(num):
    strobogrammatic_map = {"0": "0", "1": "1", "6": "9", "8": "8", "9": "6"}

    left = 0
    right = len(num) - 1

    while left <= right:
        if num[left] not in strobogrammatic_map or num[right] not in strobogrammatic_map:
            return False

        if strobogrammatic_map[num[left]] != num[right]:
            return False

        left += 1
        right -= 1

    return True


num = input()
print(isStrobogrammatic(num))


ðŸ’¡ **Question 3**

Given two non-negative integers, num1 and num2 represented as string, return *the sum of* num1 *and* num2 *as a string*.

You must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.

**Example 1:**

**Input:** num1 = "11", num2 = "123"

**Output:**

"134"

Solution :

def addStrings(num1, num2):
    result = []
    carry = 0
    i = len(num1) - 1
    j = len(num2) - 1

    while i >= 0 or j >= 0 or carry:
        digit1 = int(num1[i]) if i >= 0 else 0
        digit2 = int(num2[j]) if j >= 0 else 0

        carry, digit_sum = divmod(digit1 + digit2 + carry, 10)
        result.append(str(digit_sum))

        i -= 1
        j -= 1

    return "".join(result[::-1])


num1 = input()
num2 = input()
print(addStrings(num1, num2))


ðŸ’¡ **Question 4**

Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.

**Example 1:**

**Input:** s = "Let's take LeetCode contest"

**Output:** "s'teL ekat edoCteeL tsetnoc"

Solution :

def reverseWords(s):
    words = s.split()
    reversed_words = [word[::-1] for word in words]
    return ' '.join(reversed_words)


s = input()
print(reverseWords(s))


ðŸ’¡ **Question 5**

Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string.

If there are fewer than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original.

**Example 1:**

**Input:** s = "abcdefg", k = 2

**Output:**

"bacdfeg"

Solution :

def reverseStr(s, k):
    result = list(s)
    n = len(s)

    for i in range(0, n, 2 * k):
        left = i
        right = min(i + k - 1, n - 1)

        while left < right:
            result[left], result[right] = result[right], result[left]
            left += 1
            right -= 1

    return ''.join(result)


s = input()
k = int(input())
print(reverseStr(s, k))


ðŸ’¡ **Question 6**

Given two strings s and goal, return true *if and only if* s *can become* goal *after some number of **shifts** on* s.

A **shift** on s consists of moving the leftmost character of s to the rightmost position.

- For example, if s = "abcde", then it will be "bcdea" after one shift.

**Example 1:**

**Input:** s = "abcde", goal = "cdeab"

**Output:**

true

Solution :

def rotateString(s, goal):
    if len(s) != len(goal):
        return False

    if s == goal:
        return True

    for _ in range(len(s)):
        s = s[1:] + s[0]
        if s == goal:
            return True

    return False


s = input()
goal = input()
print(rotateString(s, goal))


ðŸ’¡ **Question 7**

Given two strings s and t, return true *if they are equal when both are typed into empty text editors*. '#' means a backspace character.

Note that after backspacing an empty text, the text will continue empty.

**Example 1:**

**Input:** s = "ab#c", t = "ad#c"

**Output:** true

**Explanation:**

Both s and t become "ac".

Solution :

def backspaceCompare(s, t):
    def process_string(string):
        result = []
        for char in string:
            if char != '#':
                result.append(char)
            elif result:
                result.pop()
        return ''.join(result)

    return process_string(s) == process_string(t)


s = input()
t = input()
print(backspaceCompare(s, t))


ðŸ’¡ **Question 8**

You are given an array coordinates, coordinates[i] = [x, y], where [x, y] represents the coordinate of a point.
Check if these points make a straight line in the XY plane.

Solution :

def checkStraightLine(coordinates):
    if len(coordinates) <= 2:
        return True

    x0, y0 = coordinates[0]
    x1, y1 = coordinates[1]

    for i in range(2, len(coordinates)):
        x, y = coordinates[i]
        if (y1 - y0) * (x - x0) != (y - y0) * (x1 - x0):
            return False

    return True


coordinates_input = input()
coordinates = eval(coordinates_input)
print(checkStraightLine(coordinates))
